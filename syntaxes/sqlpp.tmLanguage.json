{
    "scopeName": "source.sql.sqlpp",
    "patterns": [{
        "include": "#comment"
    }, {
        "include": "#sqlpp-stmt"
    }],
    "repository": {
        "sqlpp-stmt": {
            "patterns": [{
                "include": "#select-stmt"
            }]
        },
        "select-stmt": {
            "patterns": [{
                "include": "#select-stmt-select"
            }, {
                "include": "#select-stmt-values"
            }]
        },
        "with-clause-as": {
            "begin": "(?i)\\b(as)\\b\\s*",
            "end": "(?<=\\))",
            "name": "meta.other.cte-as.sql.sqlpp",
            "beginCaptures": {
                "1": {
                    "name": "keyword.other.sql.sqlpp"
                }
            },
            "endCaptures": {},
            "patterns": [{
                "begin": "\\(",
                "end": "\\)",
                "name": "meta.cte-select-stmt.sql.sqlpp",
                "beginCaptures": {},
                "endCaptures": {}
            }]
        },
        "common-table-expression": {
            "patterns": [{
                "include": "#with-clause-as"
            }, {
                "include": "#name"
            }, {
                "begin": "\\(",
                "end": "\\)",
                "beginCaptures": {},
                "endCaptures": {},
                "patterns": [{
                    "include": "#name"
                }]
            }]
        },
        "select-stmt-select": {
            "begin": "(?i)\\b(select)\\b\\s*",
            "end": "(?=;)",
            "name": "meta.statement.select.sql.sqlpp",
            "beginCaptures": {
                "1": {
                    "name": "keyword.other.DML.sql.sqlpp"
                }
            },
            "patterns": [{
                "include": "#expr"
            }]
        },
        "select-stmt-values": {
            "begin": "(?i)\\b(values)\\s*",
            "end": "(?=;)",
            "name": "meta.statement.values.sql.sqlpp",
            "beginCaptures": {
                "1": {
                    "name": "keyword.other.DML.sql.sqlpp"
                }
            },
            "patterns": [{
                "include": "#rowvalue"
            }]
        },
        "rowvalue": {
            "begin": "\\(",
            "end": "\\)",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.section.rowvalue.values.begin"
                }
            },
            "endCaptures": {
                "0": {
                    "name": "punctuation.section.rowvalue.values.end"
                }
            },
            "name": "meta.rowvalue.sql.sqlpp",
            "patterns": [{
                "include": "#expr"
            }, {
                "match": ",",
                "name": "punctuation.separator.rowvalue"
            }]
        },
        "expr": {
            "patterns": [{
                "include": "#comment"
            }, {
                "include": "#keyword"
            }, {
                "include": "#expr-parens"
            }, {
                "include": "#function"
            }, {
                "include": "#literal-value"
            }, {
                "include": "#name"
            }]
        },
        "expr-parens": {
            "begin": "\\(",
            "end": "\\)",
            "name": "meta.parens",
            "patterns": [{
                "include": "#keyword"
            }, {
                "include": "#expr-parens"
            }, {
                "include": "#function"
            }, {
                "include": "#literal-value"
            }, {
                "include": "#name"
            }]
        },
        "literal-value": {
            "patterns": [{
                "match": "(?i)\\b(null|true|false|missing)\\b",
                "name": "constant.language.sql.sqlpp"
            }, {
                "include": "#numeric-literal"
            }, {
                "include": "#string-literal"
            }]
        },
        "function": {
            "begin": "(?i)\\b(array_avg|array_contains|array_count|array_ifnull|array_length|array_max|array_min|array_of|array_sum|greatest|least|ifmissing|ifnull|ifmissingornull|missingif|nullif|millis_to_str|millis_to_utc|str_to_millis|str_to_utc|abs|acos|asin|atan|atan2|ceil|cos|degrees|e|exp|floor|ln|log|pi|power|radians|round|sign|sin|sqrt|tan|trunc|regexp_contains|regexp_like|regexp_position|regexp_replace|contains|length|lower|ltrim|rtrim|trim|upper|isarray|isatom|isboolean|isnumber|isobject|isstring|type|toarray|toatom|toboolean|tonumber|toobject|tostring|rank|avg|count|max|min|sum)\\b\\s*(\\()",
            "end": "\\)",
            "name": "meta.function-call.sql.sqlpp",
            "beginCaptures": {
                "1": {
                    "name": "entity.name.function.sql.sqlpp"
                }
            },
            "patterns": [{
                "include": "#expr"
            }]
        },
        "keyword": {
            "match": "(?i)\\b(and|any|as|asc|between|by|case|collate|cross|desc|distinct|else|end|every|from|group|having|in|inner|is|join|left|like|limit|natural|not|offset|on|or|order|outer|regex|right|satisfies|select|then|using|when|where)\\b",
            "name": "keyword.other.sql.sqlpp"
        },
        "name": {
            "patterns": [{
                "include": "#doublequoted-name"
            }, {
                "include": "#backquoted-name"
            }, {
                "include": "#bare-name"
            }]
        },
        "bare-name": {
            "match": "\\b(?i)(?!and\\b|any\\b|as\\b|asc\\b|between\\b|by\\b|case\\b|collate\\b|cross\\b|desc\\b|distinct\\b|else\\b|end\\b|every\\b|from\\b|group\\b|having\\b|in\\b|inner\\b|is\\b|join\\b|left\\b|like\\b|limit\\b|natural\\b|not\\b|offset\\b|on\\b|or\\b|order\\b|outer\\b|regex\\b|right\\b|satisfies\\b|select\\b|then\\b|using\\b|when\\b|where\\b)\\w+\\b",
            "name": "variable.other.bare"
        },
        "doublequoted-name": {
            "begin": "\"",
            "end": "\"(?!\")",
            "name": "string.quoted.double.sql.sqlpp",
            "patterns": [{
                "match": "\"\"",
                "name": "constant.character.escape.doublequote.sql.sqlpp"
            }]
        },
        "backquoted-name": {
            "begin": "`",
            "end": "`(?!`)",
            "name": "string.quoted.backtick.sql.sqlpp",
            "patterns": [{
                "match": "``",
                "name": "constant.character.escape.backquote.sql.sqlpp"
            }]
        },
        "numeric-literal": {
            "match": "(?i)(?<![\\w\\.])((\\d+(\\.\\d*)?|\\.\\d+)(e[-+]?\\d+)?|0x[\\da-f]+)\\b",
            "name": "constant.numeric.sql.sqlpp"
        },
        "string-literal": {
            "begin": "'",
            "end": "'(?!')",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.sql.sqlpp"
                }
            },
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.sql.sqlpp"
                }
            },
            "name": "string.quoted.single.sql.sqlpp",
            "patterns": [{
                "match": "''",
                "name": "constant.character.escape.singlequote.sql.sqlpp"
            }]
        },
        "comment": {
            "patterns": [{
                "match": "--.*",
                "name": "comment.line.double-dash.sql.sqlpp"
            }, {
                "begin": "/\\*",
                "end": "\\*/",
                "name": "comment.block.sql.sqlpp"
            }]
        }
    }
}